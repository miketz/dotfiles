;; -*- mode: lisp -*-
;;put this in ~/.emacs.d/init.el
;; (when (eq system-type 'gnu/linux)
;;   (require 'stumpwm-mode)
;;   (setq stumpwm-shell-program "/usr/bin/stumpish"))
;;Then in stumpwm lisp files run: M-x stumpwm-mode



(in-package :stumpwm) ; i may type out the namespace anyway


;; useful prefixes at http://arpinux.org/x/doku.php/wms/ratpoison_gb
;; S : Shift modifier
;; C : Control modifier
;; M : Meta modifier
;; A : Alt modifier
;; H : Hyper modifier
;; s : Super modifier
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (stumpwm:kbd "s-j") "move-focus down")
(define-key *top-map* (stumpwm:kbd "s-k") "move-focus up")
(define-key *top-map* (stumpwm:kbd "s-l") "move-focus right")
(define-key *top-map* (stumpwm:kbd "s-H") "move-window left")
(define-key *top-map* (stumpwm:kbd "s-J") "move-window down")
(define-key *top-map* (stumpwm:kbd "s-K") "move-window up")
(define-key *top-map* (stumpwm:kbd "s-L") "move-window right")
(define-key *top-map* (stumpwm:kbd "s-n") "pull-hidden-next")
(define-key *top-map* (stumpwm:kbd "s-p") "pull-hidden-previous")
(define-key *top-map* (stumpwm:kbd "s-d") "exec")
(define-key *top-map* (stumpwm:kbd "s-b") "banish")
(define-key *top-map* (stumpwm:kbd "s-o") "exec dmenu_run")
;; alt-tab like in most other window managers.
(define-key *top-map* (stumpwm:kbd "M-Tab") "next")
(define-key *top-map* (stumpwm:kbd "M-ISO_Left_Tab") "prev")

;; mimic some dwm bindings
;; definekey top s-C kill # this kills the whole app, not jsut a popup window!
(define-key *top-map* (stumpwm:kbd "s-C") "delete")
(define-key *top-map* (stumpwm:kbd "s-Q") "quit")


;; *root-map* is the C-t prefix.
(define-key *root-map* (stumpwm:kbd "e") "exec emacs -fs \"\"")
;; (define-key *root-map* (stumpwm:kbd "E") "exec emacsclient -c -a \"\"")


;; change focus to a frame when it is clicked.
(setf *mouse-focus-policy* :click) ;(:click :ignore :sloppy)


;; time format. Default was "%a %b %e %k:%M:%S"
;; uses same format string as: date --help
;; %n is newline.
(setf stumpwm:*time-format-string-default* "%Y-%m-%d%n%a %b %e%n%l:%M %p")
                                        ;"%Y-%m-%d%n%a %b %e%n%r"


;;-----------------------------------------------------------------------------
;; groups
;;-----------------------------------------------------------------------------
;; create some groups on startup. gnewbg creates without switching.
;; (gnewbg "1") ; 1 already exists.
(gnewbg "2")
(gnewbg "3")
(gnewbg "4")
;; keybinds to switch groups
;; (define-key *top-map* (stumpwm:kbd "s-0") "gselect 0")
(define-key *top-map* (stumpwm:kbd "s-1") "gselect 1")
(define-key *top-map* (stumpwm:kbd "s-2") "gselect 2")
(define-key *top-map* (stumpwm:kbd "s-3") "gselect 3")
(define-key *top-map* (stumpwm:kbd "s-4") "gselect 4")
;; keybinds to move current window to a group.
;; TODO: figure out how to use Shift instead of Control.
(define-key *top-map* (stumpwm:kbd "s-C-1") "gmove 1")
(define-key *top-map* (stumpwm:kbd "s-C-2") "gmove 2")
(define-key *top-map* (stumpwm:kbd "s-C-3") "gmove 3")
(define-key *top-map* (stumpwm:kbd "s-C-4") "gmove 4")

;;------------------------------------------------
;; background image
;;------------------------------------------------
(when nil ;; todo handle for specific computers
  (defvar *background-image-path* "/home/mike/Pictures") ;not used yet.

  ;; set the initial background image.
  (run-shell-command "display -window root /home/mike/Pictures/sunset1.jpg")

  ;; key-binds to change bg.
  (define-key *top-map* (stumpwm:kbd "s-i") "exec feh --bg-scale /home/mike/Pictures/sunset1.jpg")
  (define-key *top-map* (stumpwm:kbd "s-u") "exec feh --bg-scale /home/mike/Pictures/water.jpeg"))
